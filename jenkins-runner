#! /usr/bin/env python3

from getpass import getpass
from requests.auth import HTTPBasicAuth
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from time import sleep
from urllib.parse import urlparse
import json
import os
import requests
import sys


requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


class Command(object):
    def __init__(self, name="", job_name="", parameters={}):
        self.name = name
        self.job_name = job_name
        self.parameters = { "parameter": [
            {"name": k, "value": v}
            for k, v in parameters.items()
        ]}


class JenkinsApiClient(object):
    __crumb = None
    __jobs_path = "/api/json?tree=jobs[name,order]"
    __status_path = "/job/%s/lastBuild/api/json?tree=result"
    __last_build_path = "/job/%s/lastBuild/api/json"
    __job_build_path = "/job/%s/build"
    __crumb_path = "/crumbIssuer/api/json"
    __max_get_retry = 3

    def __init__(self, base_url, verify=True, auth=None):
        self.__base_url = base_url
        self.__verify = verify
        self.__auth = auth

    def _get_crumb(self):
        if not self.__crumb:
            # Use base hostname for crumb lookup
            parsed = urlparse(self.__base_url)
            self.__crumb = requests.get(
                ("%s://%s" % (parsed.scheme, parsed.netloc)) + self.__crumb_path,
                verify=self.__verify,
                auth=self.__auth,
            ).json()["crumb"]
        return self.__crumb

    def _get(self, path, count=0):
        try:
            return requests.get(
                self.__base_url + path,
                verify=self.__verify,
                auth=self.__auth,
            ).json()
        except requests.exceptions.ConnectionError as e:
            if count >= self.__max_get_retry:
                raise e
            else:
                print("Connection Failed: Trying again in 1 second...")
                sleep(1)
                return self._get(path, count=count+1)

    def _post(self, path, **kwargs):
        requests.post(
            self.__base_url + path,
            verify=self.__verify,
            auth=self.__auth,
            headers={"Jenkins-Crumb": self._get_crumb()},
            **kwargs
        )

    def get_jobs(self):
        return [j["name"] for j in self._get(self.__jobs_path)["jobs"]]

    def get_result(self, job):
        return self._get(self.__status_path % job)["result"]

    def is_building(self, job):
        return self._get(self.__last_build_path % job)["building"]

    def build(self, job, parameters):
        self._post(self.__job_build_path % job, data={
            "json": json.dumps(parameters)
        })


class JenkinsRunner(object):
    def __init__(self, api_client):
        self.__api = api_client

    def cmd_list(self, cmd):
        """jenkins-runner list"""
        print("\n".join(self.__api.get_jobs()))
        return 0

    def cmd_run(self, cmd):
        """jenkins-runner <job> {name: value, name: value, ...}"""

        if cmd.job_name not in self.__api.get_jobs():
            print(cmd.job_name + " is not a valid job")
            return 1

        self.cmd_wait(cmd)
        self.__api.build(cmd.job_name, cmd.parameters)
        print("New Job Started!")
        self.cmd_wait(cmd)
        return self.cmd_result(cmd)

    def cmd_result(self, cmd):
        """jenkins-runner result <job>"""
        result = self.__api.get_result(cmd.job_name)
        print("Result: " + result)
        return int(result != "SUCCESS")

    def cmd_wait(self, cmd):
        """jenkins-runner wait <job>"""
        print("Waiting for '%s' to finish..." % cmd.job_name)
        sleep(10)
        while self.__api.is_building(cmd.job_name):
            sys.stdout.write('.')
            sys.stdout.flush()
            sleep(5)
        print("Done!")

    def cmd_help(self, cmd):
        """jenkins-runner help"""

        print("Commands:")

        for k in dir(self):
            if k.startswith("cmd_"):
                print("* %-6s - %s" % (
                    k.replace("cmd_", ""),
                    str(getattr(self, k).__doc__ or "")
                ))

    def run(self, cmd):
        try:
            return getattr(self, "cmd_" + cmd.name, self.cmd_help)(cmd)
        except KeyboardInterrupt:
            return 1


if __name__ == "__main__":
    def get_arg(index, default, argc=len(sys.argv)):
        return sys.argv[index] if argc > index else default

    sys.exit(JenkinsRunner(JenkinsApiClient(
        base_url=os.environ.get("JENKINS_URL"),
        verify=False,
        auth=HTTPBasicAuth(
            os.environ.get("JENKINS_USERNAME") or input("JENKINS_USERNAME: "),
            os.environ.get("JENKINS_PASSWORD") or getpass("JENKINS_PASSWORD: "),
        )
    )).run(Command(
        name=get_arg(1, "help"),
        job_name=get_arg(2, ""),
        parameters=json.loads(get_arg(3, '{}')),
    )))
